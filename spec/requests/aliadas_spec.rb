require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/aliadas", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Aliada. As you add validations to Aliada, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "MyString",
    }
  }
  # describe "GET /index" do
  #   it "renders a successful response" do
  #     Aliada.create! valid_attributes
  #     get aliadas_url
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     aliada = Aliada.create! valid_attributes
  #     get aliada_url(aliada)
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /new" do
  #   it "renders a successful response" do
  #     get new_aliada_url
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /edit" do
  #   it "renders a successful response" do
  #     aliada = Aliada.create! valid_attributes
  #     get edit_aliada_url(aliada)
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Aliada" do
        expect {
          post aliadas_url, params: { aliada: valid_attributes }
        }.to change(Aliada, :count).by(1)
      end

      it "returns a successful response" do
        post aliadas_url, params: { aliada: valid_attributes }
        expect(response).to be_successful
      end
    end

    # context "with invalid parameters" do
    #   it "does not create a new Aliada" do
    #     expect {
    #       post aliadas_url, params: { aliada: invalid_attributes }
    #     }.to change(Aliada, :count).by(0)
    #   end

    #   it "renders a successful response (i.e. to display the 'new' template)" do
    #     post aliadas_url, params: { aliada: invalid_attributes }
    #     expect(response).to be_successful
    #   end
    # end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested aliada" do
  #       aliada = Aliada.create! valid_attributes
  #       patch aliada_url(aliada), params: { aliada: new_attributes }
  #       aliada.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "redirects to the aliada" do
  #       aliada = Aliada.create! valid_attributes
  #       patch aliada_url(aliada), params: { aliada: new_attributes }
  #       aliada.reload
  #       expect(response).to redirect_to(aliada_url(aliada))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       aliada = Aliada.create! valid_attributes
  #       patch aliada_url(aliada), params: { aliada: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested aliada" do
  #     aliada = Aliada.create! valid_attributes
  #     expect {
  #       delete aliada_url(aliada)
  #     }.to change(Aliada, :count).by(-1)
  #   end

  #   it "redirects to the aliadas list" do
  #     aliada = Aliada.create! valid_attributes
  #     delete aliada_url(aliada)
  #     expect(response).to redirect_to(aliadas_url)
  #   end
  # end
end
