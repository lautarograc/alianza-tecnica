# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/assign_events', type: :request do
  # create 2 aliadas
  let!(:aliada1) { Aliada.create!(name: 'Aliada 1') }
  let!(:aliada2) { Aliada.create!(name: 'Aliada 2') }

  # create 3 events starting at different times
  let!(:event1) { Event.create!(service_id: 'MyString1', starts: 1.hour.ago, ends: 1.hour.from_now) }
  let!(:event2) { Event.create!(service_id: 'MyString2', starts: 2.hours.ago, ends: 2.hours.from_now) }
  let!(:event3) { Event.create!(service_id: 'MyString3', starts: 3.hours.ago, ends: 3.hours.from_now) }

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'assignes events to aliadas' do
        # url to assign should be "/events/:event_service_id/assign_event"
        # aliada1 should have 1 event and aliada2 should have 0 events
        expect do
          post "/events/#{event1.service_id}/assign_event", params: { names: [aliada1.name, aliada2.name] }
        end.to change(aliada1.events, :count).by(1) && change(aliada2.events, :count).by(0)
      end
      it 'when aliada is busy, it assigns event to next aliada' do
        # aliada1 should have 1 event and aliada2 should have 0 events
        expect do
          post "/events/#{event1.service_id}/assign_event", params: { names: [aliada1.name, aliada2.name] }
        end.to change(aliada1.events, :count).by(1) && change(aliada2.events, :count).by(0)
        # aliada1 should have 1 event and aliada2 should have 1 event
        expect do
          post "/events/#{event2.service_id}/assign_event", params: { names: [aliada1.name, aliada2.name] }
        end.to change(aliada1.events, :count).by(0) && change(aliada2.events, :count).by(1)
      end
    end
  end
end
